from sqlite3 import connect
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtSql import QSqlDatabase, QSqlQuery

def connect():
    con = QSqlDatabase.addDatabase("QSQLITE")
    con.setDatabaseName(R'C:\Users\jeonj\OneDrive\Рабочий стол\tour\kruis.sqlite')
    if not con.open():
        print("Database Error: %s" % con.lastError().databaseText())
        sys.exit(1)
    createTableQuery = QSqlQuery()
    createTableQuery.exec(
    """
    CREATE TABLE staff (
        id INTEGER PRIMARY KEY AUTOINCREMENT UNIQUE NOT NULL,
        name VARCHAR(50) NOT NULL,
        surname VARCHAR(50) NOT NULL,
        post VARCHAR(50),
        phonenumber VARCHAR(15) NOT NULL
    )
    """)
    createTableQuery.exec(
    """
    CREATE TABLE tasks (
        id INTEGER PRIMARY KEY AUTOINCREMENT UNIQUE NOT NULL,
        id_trav INTEGER NOT NULL,
        description VARCHAR(50) NOT NULL,
        status VARCHAR(50),
        start_date date,
        end_date date,
        id_st INTEGER NOT NULL
    )
    """)
    createTableQuery.exec(
    """
    CREATE TABLE travel_packages (
        id INTEGER PRIMARY KEY AUTOINCREMENT UNIQUE NOT NULL,
        name VARCHAR(50) NOT NULL,
        description VARCHAR(50) NOT NULL,
        status VARCHAR(50),
        start_date date,
        end_date date,
        id_pr INTEGER NOT NULL
    )
    """)
    createTableQuery.exec("""
    CREATE TABLE provider (
        id INTEGER PRIMARY KEY AUTOINCREMENT UNIQUE NOT NULL,
        name VARCHAR(50) NOT NULL,
        surname VARCHAR(50) NOT NULL,
        phonenumber VARCHAR(15)
    )
    """)
class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(605, 438)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.pushButton_13 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_13.setGeometry(QtCore.QRect(520, 0, 75, 23))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.pushButton_13.setFont(font)
        self.pushButton_13.setObjectName("pushButton_13")
        self.tabWidget = QtWidgets.QTabWidget(self.centralwidget)
        self.tabWidget.setGeometry(QtCore.QRect(10, 20, 580, 400))
        self.tabWidget.setObjectName("tabWidget")
        self.tab = QtWidgets.QWidget()
        self.tab.setObjectName("tab")
        self.tableWidget = QtWidgets.QTableWidget(self.tab)
        self.tableWidget.setGeometry(QtCore.QRect(0, 0, 381, 301))
        self.tableWidget.setObjectName("tableWidget")
        self.tableWidget.setColumnCount(7)
        self.tableWidget.setHorizontalHeaderLabels(["Номер","Номер_круиза", "Описание", "Статус", "Дата_нач", "Дата_кон","Ид_сотрудника"])
        self.tableWidget.setSelectionBehavior(self.tableWidget.SelectRows)
        self.lineEdit = QtWidgets.QLineEdit(self.tab)
        self.lineEdit.setGeometry(QtCore.QRect(390, 30, 141, 21))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.lineEdit.setFont(font)
        self.lineEdit.setObjectName("lineEdit")
        self.lineEdit_2 = QtWidgets.QLineEdit(self.tab)
        self.lineEdit_2.setGeometry(QtCore.QRect(390, 80, 141, 21))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.lineEdit_2.setFont(font)
        self.lineEdit_2.setObjectName("lineEdit_2")
        self.lineEdit_3 = QtWidgets.QLineEdit(self.tab)
        self.lineEdit_3.setGeometry(QtCore.QRect(390, 130, 141, 21))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.lineEdit_3.setFont(font)
        self.lineEdit_3.setObjectName("lineEdit_3")
        self.label = QtWidgets.QLabel(self.tab)
        self.label.setGeometry(QtCore.QRect(390, 0, 110, 20))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.label.setFont(font)
        self.label.setObjectName("label")
        self.label_2 = QtWidgets.QLabel(self.tab)
        self.label_2.setGeometry(QtCore.QRect(390, 50, 140, 20))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.label_2.setFont(font)
        self.label_2.setObjectName("label_2")
        self.label_3 = QtWidgets.QLabel(self.tab)
        self.label_3.setGeometry(QtCore.QRect(390, 100, 140, 20))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.label_3.setFont(font)
        self.label_3.setObjectName("label_3")
        self.label_4 = QtWidgets.QLabel(self.tab)
        self.label_4.setGeometry(QtCore.QRect(390, 150, 140, 20))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.label_4.setFont(font)
        self.label_4.setObjectName("label_4")
        self.label_5 = QtWidgets.QLabel(self.tab)
        self.label_5.setGeometry(QtCore.QRect(390, 210, 140, 20))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.label_5.setFont(font)
        self.label_5.setObjectName("label_5")
        self.dateEdit = QtWidgets.QDateEdit(self.tab)
        self.dateEdit.setGeometry(QtCore.QRect(390, 180, 140, 22))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.dateEdit.setFont(font)
        self.dateEdit.setObjectName("dateEdit")
        self.dateEdit_2 = QtWidgets.QDateEdit(self.tab)
        self.dateEdit_2.setGeometry(QtCore.QRect(390, 240, 140, 22))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.dateEdit_2.setFont(font)
        self.dateEdit_2.setObjectName("dateEdit_2")
        self.comboBox = QtWidgets.QComboBox(self.tab)
        self.comboBox.setGeometry(QtCore.QRect(390, 290, 140, 21))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.comboBox.setFont(font)
        self.comboBox.setObjectName("comboBox")
        self.label_6 = QtWidgets.QLabel(self.tab)
        self.label_6.setGeometry(QtCore.QRect(390, 260, 110, 20))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.label_6.setFont(font)
        self.label_6.setObjectName("label_6")
        self.pushButton_10 = QtWidgets.QPushButton(self.tab)
        self.pushButton_10.setGeometry(QtCore.QRect(10, 320, 120, 23))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.pushButton_10.setFont(font)
        self.pushButton_10.setObjectName("pushButton_10")
        self.pushButton_11 = QtWidgets.QPushButton(self.tab)
        self.pushButton_11.setGeometry(QtCore.QRect(150, 320, 120, 23))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.pushButton_11.setFont(font)
        self.pushButton_11.setObjectName("pushButton_11")
        self.pushButton_12 = QtWidgets.QPushButton(self.tab)
        self.pushButton_12.setGeometry(QtCore.QRect(290, 320, 100, 23))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.pushButton_12.setFont(font)
        self.pushButton_12.setObjectName("pushButton_12")
        self.pushButton_20 = QtWidgets.QPushButton(self.tab)
        self.pushButton_20.setGeometry(QtCore.QRect(410, 320, 100, 23))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.pushButton_20.setFont(font)
        self.pushButton_20.setObjectName("pushButton_20")
        self.tabWidget.addTab(self.tab, "")
        self.tab_3 = QtWidgets.QWidget()
        self.tab_3.setObjectName("tab_3")
        self.tableWidget_2 = QtWidgets.QTableWidget(self.tab_3)
        self.tableWidget_2.setGeometry(QtCore.QRect(0, 0, 381, 301))
        self.tableWidget_2.setObjectName("tableWidget_2")
        self.tableWidget_2.setColumnCount(4)
        self.tableWidget_2.setHorizontalHeaderLabels(["Номер","Фамилия","Имя","Номер_телефона"])
        self.tableWidget_2.setSelectionBehavior(self.tableWidget_2.SelectRows)
        self.label_13 = QtWidgets.QLabel(self.tab_3)
      #  self.label_13.setGeometry(QtCore.QRect(400, 110, 140, 20))
      #  font = QtGui.QFont()
      #  font.setPointSize(12)
      #  self.label_13.setFont(font)
      #  self.label_13.setObjectName("label_13")
        self.lineEdit_7 = QtWidgets.QLineEdit(self.tab_3)
        self.lineEdit_7.setGeometry(QtCore.QRect(400, 90, 160, 21))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.lineEdit_7.setFont(font)
        self.lineEdit_7.setObjectName("lineEdit_7")
        self.lineEdit_8 = QtWidgets.QLineEdit(self.tab_3)
        self.lineEdit_8.setGeometry(QtCore.QRect(400, 40, 160, 21))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.lineEdit_8.setFont(font)
        self.lineEdit_8.setObjectName("lineEdit_8")
        #self.lineEdit_9 = QtWidgets.QLineEdit(self.tab_3)
        #self.lineEdit_9.setGeometry(QtCore.QRect(400, 140, 160, 21))
        #font = QtGui.QFont()
        #font.setPointSize(12)
        #self.lineEdit_9.setFont(font)
        #self.lineEdit_9.setObjectName("lineEdit_9")
        self.label_14 = QtWidgets.QLabel(self.tab_3)
        self.label_14.setGeometry(QtCore.QRect(400, 10, 110, 20))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.label_14.setFont(font)
        self.label_14.setObjectName("label_14")
        self.label_15 = QtWidgets.QLabel(self.tab_3)
        self.label_15.setGeometry(QtCore.QRect(400, 60, 140, 20))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.label_15.setFont(font)
        self.label_15.setObjectName("label_15")
        self.label_16 = QtWidgets.QLabel(self.tab_3)
        self.label_16.setGeometry(QtCore.QRect(400, 110, 140, 20))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.label_16.setFont(font)
        self.label_16.setObjectName("label_16")
        self.lineEdit_10 = QtWidgets.QLineEdit(self.tab_3)
        self.lineEdit_10.setGeometry(QtCore.QRect(400, 140, 160, 21))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.lineEdit_10.setFont(font)
        self.lineEdit_10.setObjectName("lineEdit_10")
        self.pushButton_7 = QtWidgets.QPushButton(self.tab_3)
        self.pushButton_7.setGeometry(QtCore.QRect(400, 270, 120, 23))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.pushButton_7.setFont(font)
        self.pushButton_7.setObjectName("pushButton_7")
        self.pushButton_8 = QtWidgets.QPushButton(self.tab_3)
        self.pushButton_8.setGeometry(QtCore.QRect(400, 310, 120, 23))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.pushButton_8.setFont(font)
        self.pushButton_8.setObjectName("pushButton_8")
        self.pushButton_9 = QtWidgets.QPushButton(self.tab_3)
        self.pushButton_9.setGeometry(QtCore.QRect(400, 230, 100, 23))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.pushButton_9.setFont(font)
        self.pushButton_9.setObjectName("pushButton_9")
        self.pushButton_21= QtWidgets.QPushButton(self.tab_3)
        self.pushButton_21.setGeometry(QtCore.QRect(400, 350, 100, 23))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.pushButton_21.setFont(font)
        self.pushButton_21.setObjectName("pushButton_21")
        self.tabWidget.addTab(self.tab_3, "")
        self.tab_4 = QtWidgets.QWidget()
        self.tab_4.setObjectName("tab_4")
        self.tableWidget_3 = QtWidgets.QTableWidget(self.tab_4)
        self.tableWidget_3.setGeometry(QtCore.QRect(0, 0, 381, 301))
        self.tableWidget_3.setObjectName("tableWidget_3")
        self.tableWidget_3.setColumnCount(5)
        self.tableWidget_3.setHorizontalHeaderLabels(["Номер","Фамилия","Имя","Должность","Номер_телефона"])
        self.tableWidget_3.setSelectionBehavior(self.tableWidget_3.SelectRows)
        self.lineEdit_11 = QtWidgets.QLineEdit(self.tab_4)
        self.lineEdit_11.setGeometry(QtCore.QRect(400, 40, 160, 21))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.lineEdit_11.setFont(font)
        self.lineEdit_11.setObjectName("lineEdit_11")
        self.label_17 = QtWidgets.QLabel(self.tab_4)
        self.label_17.setGeometry(QtCore.QRect(400, 110, 140, 20))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.label_17.setFont(font)
        self.label_17.setObjectName("label_17")
        self.lineEdit_12 = QtWidgets.QLineEdit(self.tab_4)
        self.lineEdit_12.setGeometry(QtCore.QRect(400, 90, 160, 21))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.lineEdit_12.setFont(font)
        self.lineEdit_12.setObjectName("lineEdit_12")
        self.label_18 = QtWidgets.QLabel(self.tab_4)
        self.label_18.setGeometry(QtCore.QRect(400, 10, 110, 20))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.label_18.setFont(font)
        self.label_18.setObjectName("label_18")
        self.label_19 = QtWidgets.QLabel(self.tab_4)
        self.label_19.setGeometry(QtCore.QRect(400, 60, 140, 20))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.label_19.setFont(font)
        self.label_19.setObjectName("label_19")
        self.lineEdit_13 = QtWidgets.QLineEdit(self.tab_4)
        self.lineEdit_13.setGeometry(QtCore.QRect(400, 140, 160, 21))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.lineEdit_13.setFont(font)
        self.lineEdit_13.setObjectName("lineEdit_13")
        self.label_20 = QtWidgets.QLabel(self.tab_4)
        self.label_20.setGeometry(QtCore.QRect(400, 160, 140, 20))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.label_20.setFont(font)
        self.label_20.setObjectName("label_20")
        self.lineEdit_14 = QtWidgets.QLineEdit(self.tab_4)
        self.lineEdit_14.setGeometry(QtCore.QRect(400, 190, 160, 21))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.lineEdit_14.setFont(font)
        self.lineEdit_14.setObjectName("lineEdit_14")
        self.pushButton = QtWidgets.QPushButton(self.tab_4)
        self.pushButton.setGeometry(QtCore.QRect(400, 230, 100, 23))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.pushButton.setFont(font)
        self.pushButton.setObjectName("pushButton")
        self.pushButton_2 = QtWidgets.QPushButton(self.tab_4)
        self.pushButton_2.setGeometry(QtCore.QRect(400, 270, 120, 23))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.pushButton_2.setFont(font)
        self.pushButton_2.setObjectName("pushButton_2")
        self.pushButton_3 = QtWidgets.QPushButton(self.tab_4)
        self.pushButton_3.setGeometry(QtCore.QRect(400, 310, 120, 23))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.pushButton_3.setFont(font)
        self.pushButton_3.setObjectName("pushButton_3")
        self.pushButton_22= QtWidgets.QPushButton(self.tab_4)
        self.pushButton_22.setGeometry(QtCore.QRect(400, 350, 100, 23))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.pushButton_22.setFont(font)
        self.pushButton_22.setObjectName("pushButton_22")
        self.tabWidget.addTab(self.tab_4, "")
        self.tab_2 = QtWidgets.QWidget()
        self.tab_2.setObjectName("tab_2")
        self.tableWidget_4 = QtWidgets.QTableWidget(self.tab_2)
        self.tableWidget_4.setGeometry(QtCore.QRect(0, 0, 381, 301))
        self.tableWidget_4.setObjectName("tableWidget_4")
        self.tableWidget_4.setColumnCount(7)
        self.tableWidget_4.setHorizontalHeaderLabels(["Номер","Наименование","Описание","Статус","Дата_нач","Дата_кон","Номер_поставщика"])
        self.tableWidget_4.setSelectionBehavior(self.tableWidget_4.SelectRows)
        self.label_7 = QtWidgets.QLabel(self.tab_2)
        self.label_7.setGeometry(QtCore.QRect(400, 100, 140, 20))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.label_7.setFont(font)
        self.label_7.setObjectName("label_7")
        self.lineEdit_4 = QtWidgets.QLineEdit(self.tab_2)
        self.lineEdit_4.setGeometry(QtCore.QRect(400, 80, 141, 21))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.lineEdit_4.setFont(font)
        self.lineEdit_4.setObjectName("lineEdit_4")
        self.label_8 = QtWidgets.QLabel(self.tab_2)
        self.label_8.setGeometry(QtCore.QRect(400, 200, 140, 20))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.label_8.setFont(font)
        self.label_8.setObjectName("label_8")
        self.lineEdit_5 = QtWidgets.QLineEdit(self.tab_2)
        self.lineEdit_5.setGeometry(QtCore.QRect(400, 30, 141, 21))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.lineEdit_5.setFont(font)
        self.lineEdit_5.setObjectName("lineEdit_5")
        self.lineEdit_6 = QtWidgets.QLineEdit(self.tab_2)
        self.lineEdit_6.setGeometry(QtCore.QRect(400, 130, 141, 21))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.lineEdit_6.setFont(font)
        self.lineEdit_6.setObjectName("lineEdit_6")
        self.label_9 = QtWidgets.QLabel(self.tab_2)
        self.label_9.setGeometry(QtCore.QRect(400, 0, 140, 20))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.label_9.setFont(font)
        self.label_9.setObjectName("label_9")
        self.label_10 = QtWidgets.QLabel(self.tab_2)
        self.label_10.setGeometry(QtCore.QRect(400, 50, 140, 20))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.label_10.setFont(font)
        self.label_10.setObjectName("label_10")
        self.label_11 = QtWidgets.QLabel(self.tab_2)
        self.label_11.setGeometry(QtCore.QRect(400, 150, 140, 20))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.label_11.setFont(font)
        self.label_11.setObjectName("label_11")
        self.dateEdit_3 = QtWidgets.QDateEdit(self.tab_2)
        self.dateEdit_3.setGeometry(QtCore.QRect(400, 180, 140, 22))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.dateEdit_3.setFont(font)
        self.dateEdit_3.setObjectName("dateEdit_3")
        self.dateEdit_4 = QtWidgets.QDateEdit(self.tab_2)
        self.dateEdit_4.setGeometry(QtCore.QRect(400, 230, 140, 22))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.dateEdit_4.setFont(font)
        self.dateEdit_4.setObjectName("dateEdit_4")
        self.label_12 = QtWidgets.QLabel(self.tab_2)
        self.label_12.setGeometry(QtCore.QRect(400, 250, 110, 20))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.label_12.setFont(font)
        self.label_12.setObjectName("label_12")
        self.comboBox_2 = QtWidgets.QComboBox(self.tab_2)
        self.comboBox_2.setGeometry(QtCore.QRect(400, 280, 140, 21))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.comboBox_2.setFont(font)
        self.comboBox_2.setObjectName("comboBox_2")
        self.pushButton_4 = QtWidgets.QPushButton(self.tab_2)
        self.pushButton_4.setGeometry(QtCore.QRect(150, 320, 120, 23))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.pushButton_4.setFont(font)
        self.pushButton_4.setObjectName("pushButton_4")
        self.pushButton_5 = QtWidgets.QPushButton(self.tab_2)
        self.pushButton_5.setGeometry(QtCore.QRect(10, 320, 120, 23))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.pushButton_5.setFont(font)
        self.pushButton_5.setObjectName("pushButton_5")
        self.pushButton_6 = QtWidgets.QPushButton(self.tab_2)
        self.pushButton_6.setGeometry(QtCore.QRect(290, 320, 100, 23))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.pushButton_6.setFont(font)
        self.pushButton_6.setObjectName("pushButton_6")
        self.pushButton_24 = QtWidgets.QPushButton(self.tab_2)
        self.pushButton_24.setGeometry(QtCore.QRect(410, 320, 100, 23))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.pushButton_24.setFont(font)
        self.pushButton_24.setObjectName("pushButton_24")
        self.tabWidget.addTab(self.tab_2, "")
        MainWindow.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        self.tabWidget.setCurrentIndex(2)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
        self.uploadTask(MainWindow)
        self.uploadProvider(MainWindow)
        self.uploadStaff(MainWindow)
        self.uploadTravelPack(MainWindow)
        self.uploadComboBox(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.pushButton_13.setText(_translate("MainWindow", "Выход"))
        self.pushButton_13.clicked.connect(lambda: QtCore.QCoreApplication.quit())
        self.label.setText(_translate("MainWindow", "Путевка"))
        self.label_2.setText(_translate("MainWindow", "Описание задачи"))
        self.label_3.setText(_translate("MainWindow", "Статус задачи"))
        self.label_4.setText(_translate("MainWindow", "Дата начала"))
        self.label_5.setText(_translate("MainWindow", "Дата окончания"))
        self.label_6.setText(_translate("MainWindow", "Сотрудники"))
        # self.lineEdit.setInputMask(_translate("MainWindow", "999999"))
        self.pushButton_10.setText(_translate("MainWindow", "Сохранить"))
        self.pushButton_10.clicked.connect(lambda: self.saveTask(int(self.lineEdit.text()),self.lineEdit_2.text(),self.lineEdit_3.text(),self.dateEdit.text(),self.dateEdit_2.text(),self.comboBox.currentText()))
        self.pushButton_10.setVisible(False)
        self.pushButton_11.setText(_translate("MainWindow", "Редактировать"))
        self.pushButton_11.clicked.connect(lambda: self.editTask())
        self.pushButton_12.setText(_translate("MainWindow", "Ввод"))
        self.pushButton_12.clicked.connect(lambda: self.insertTask(self.lineEdit.text(),self.lineEdit_2.text(),self.lineEdit_3.text(),self.dateEdit.text(),self.dateEdit_2.text(),self.comboBox.currentText()))
        
        self.pushButton_20.setText(_translate("MainWindow", "Удалить"))
       # self.pushButton_20.clicked.connect(lambda: self.deleteTask(self.tableWidget.item(self.tableWidget.currentRow(),0).text()))
        self.pushButton_20.clicked.connect(lambda: self.deleteTask())

        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab), _translate("MainWindow", "Задачи"))
       # self.label_13.setText(_translate("MainWindow", "Отчество"))
        self.label_14.setText(_translate("MainWindow", "Фамилия"))
        self.label_15.setText(_translate("MainWindow", "Имя"))
        self.label_16.setText(_translate("MainWindow", "Номер телефона"))
        self.lineEdit_10.setInputMask(_translate("MainWindow", "+9 (999) 999-99-99"))
        self.pushButton_7.setText(_translate("MainWindow", "Редактировать"))
        self.pushButton_7.clicked.connect(lambda: self.editProvider())
        self.pushButton_8.setText(_translate("MainWindow", "Сохранить"))
        self.pushButton_8.setVisible(False)
        self.pushButton_8.clicked.connect(lambda: self.saveProvider(self.lineEdit_7.text(),self.lineEdit_8.text(),self.lineEdit_10.text()))
        self.pushButton_9.setText(_translate("MainWindow", "Ввод"))
        self.pushButton_9.clicked.connect(lambda: self.insertProvider(self.lineEdit_7.text(),self.lineEdit_8.text(),self.lineEdit_10.text()))
        self.pushButton_21.setText(_translate("MainWindow", "Удалить"))
        self.pushButton_21.clicked.connect(lambda: self.deleteProvider())
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_3), _translate("MainWindow", "Поставщики"))
        self.label_17.setText(_translate("MainWindow", "Должность"))
        self.label_18.setText(_translate("MainWindow", "Фамилия"))
        self.label_19.setText(_translate("MainWindow", "Имя"))
        self.label_20.setText(_translate("MainWindow", "Номер телефона"))
        self.lineEdit_14.setInputMask(_translate("MainWindow", "+9 (999) 999-99-99"))
        self.pushButton.setText(_translate("MainWindow", "Ввод"))
        self.pushButton.clicked.connect(lambda : self.insertStaff(self.lineEdit_11.text(),self.lineEdit_12.text(),self.lineEdit_13.text(),self.lineEdit_14.text()))
        self.pushButton_2.setText(_translate("MainWindow", "Редактировать"))
        self.pushButton_2.clicked.connect(lambda: self.editStaff())
        self.pushButton_3.setText(_translate("MainWindow", "Сохранить"))
        self.pushButton_3.setVisible(False)
        self.pushButton_3.clicked.connect(lambda : self.saveStaff(self.lineEdit_11.text(),self.lineEdit_12.text(),self.lineEdit_13.text(),self.lineEdit_14.text()))
        self.pushButton_22.setText(_translate("MainWindow", "Удалить"))
        self.pushButton_22.clicked.connect(lambda: self.deleteStaff())
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_4), _translate("MainWindow", "Сотрудники"))
        self.label_7.setText(_translate("MainWindow", "Статус путевки"))
        self.label_8.setText(_translate("MainWindow", "Дата окончания"))
        self.label_9.setText(_translate("MainWindow", "Название путевки"))
        self.label_10.setText(_translate("MainWindow", "Описание"))
        self.label_11.setText(_translate("MainWindow", "Дата начала"))
        self.label_12.setText(_translate("MainWindow", "Поставщики"))
        self.pushButton_4.setText(_translate("MainWindow", "Редактировать"))
        self.pushButton_4.clicked.connect(lambda: self.editTravelPack())
        self.pushButton_5.setText(_translate("MainWindow", "Сохранить"))
        self.pushButton_5.clicked.connect(lambda: self.saveTravelPack(self.lineEdit_5.text(),self.lineEdit_4.text(),self.lineEdit_6.text(),self.dateEdit_3.text(),self.dateEdit_4.text(),self.comboBox_2.currentText()))
        self.pushButton_5.setVisible(False)
        self.pushButton_6.setText(_translate("MainWindow", "Ввод"))
        self.pushButton_6.clicked.connect(lambda : self.insertTravelPack(self.lineEdit_4.text(),self.lineEdit_5.text(),self.lineEdit_6.text(),self.dateEdit_3.text(),self.dateEdit_4.text(),self.comboBox_2.currentText()))
        self.pushButton_24.setText(_translate("MainWindow", "Удалить"))
        self.pushButton_24.clicked.connect(lambda: self.deleteTravelPack())
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_2), _translate("MainWindow", "Путевки"))
    def uploadComboBox(self, mainWindow):
        query  = QSqlQuery()
        query.exec("select id,surname from Staff")
        #result = query.fetchall()   
        combo3list = [] 
        while query.next():
            combo3list.append(str(query.value(0))+ '.' + str(query.value(1)))
        self.comboBox.addItems(combo3list)
        query  = QSqlQuery()
        query.exec("select id,surname from Provider")
        #result = query.fetchall()   
        combo1list = [] 
        while query.next():
            combo1list.append(str(query.value(0))+ '.' + str(query.value(1)))
        self.comboBox_2.addItems(combo1list)
    def uploadTask(self,mainWindow):
        query  = QSqlQuery()
        query.exec("select id,id_trav,description,status,start_date,end_date,id_st from tasks")
        while query.next():
            rows = self.tableWidget.rowCount()
            self.tableWidget.setRowCount(rows + 1)
            self.tableWidget.setItem(rows, 0, QtWidgets.QTableWidgetItem(str(query.value(0))))
            self.tableWidget.setItem(rows, 1, QtWidgets.QTableWidgetItem(str(query.value(1))))
            self.tableWidget.setItem(rows, 2, QtWidgets.QTableWidgetItem(query.value(2)))
            self.tableWidget.setItem(rows, 3, QtWidgets.QTableWidgetItem(query.value(3)))
            self.tableWidget.setItem(rows, 4, QtWidgets.QTableWidgetItem(query.value(4)))
            self.tableWidget.setItem(rows, 5, QtWidgets.QTableWidgetItem(query.value(5)))
            self.tableWidget.setItem(rows, 6, QtWidgets.QTableWidgetItem(str(query.value(6))))
        self.tableWidget.resizeColumnsToContents()
    def updateTask(self,mainWindow):
        query  = QSqlQuery()
        query.exec("select id,id_trav,description,status,start_date,end_date,id_st from tasks")
        self.tableWidget.setRowCount(0)
        while query.next():
            rows = self.tableWidget.rowCount()
            self.tableWidget.setRowCount(rows + 1)
            self.tableWidget.setItem(rows, 0, QtWidgets.QTableWidgetItem(str(query.value(0))))
            self.tableWidget.setItem(rows, 1, QtWidgets.QTableWidgetItem(str(query.value(1))))
            self.tableWidget.setItem(rows, 2, QtWidgets.QTableWidgetItem(query.value(2)))
            self.tableWidget.setItem(rows, 3, QtWidgets.QTableWidgetItem(query.value(3)))
            self.tableWidget.setItem(rows, 4, QtWidgets.QTableWidgetItem(query.value(4)))
            self.tableWidget.setItem(rows, 5, QtWidgets.QTableWidgetItem(query.value(5)))
            self.tableWidget.setItem(rows, 6, QtWidgets.QTableWidgetItem(str(query.value(6))))
        self.tableWidget.resizeColumnsToContents()
    def uploadProvider(self,mainWindow):
        query  = QSqlQuery()
        query.exec("select id,surname,name,phonenumber from provider")
        while query.next():
            rows = self.tableWidget_2.rowCount()
            self.tableWidget_2.setRowCount(rows + 1)
            self.tableWidget_2.setItem(rows, 0, QtWidgets.QTableWidgetItem(str(query.value(0))))
            self.tableWidget_2.setItem(rows, 1, QtWidgets.QTableWidgetItem(query.value(1)))
            self.tableWidget_2.setItem(rows, 2, QtWidgets.QTableWidgetItem(query.value(2)))
            self.tableWidget_2.setItem(rows, 3, QtWidgets.QTableWidgetItem(query.value(3)))
        self.tableWidget_2.resizeColumnsToContents()
    def updateProvider(self,mainWindow):
        query  = QSqlQuery()
        query.exec("select id,surname,name,phonenumber from provider")
        self.tableWidget_2.setRowCount(0)
        while query.next():
            rows = self.tableWidget_2.rowCount()
            self.tableWidget_2.setRowCount(rows + 1)
            self.tableWidget_2.setItem(rows, 0, QtWidgets.QTableWidgetItem(str(query.value(0))))
            self.tableWidget_2.setItem(rows, 1, QtWidgets.QTableWidgetItem(query.value(1)))
            self.tableWidget_2.setItem(rows, 2, QtWidgets.QTableWidgetItem(query.value(2)))
            self.tableWidget_2.setItem(rows, 3, QtWidgets.QTableWidgetItem(query.value(3)))
        self.tableWidget_2.resizeColumnsToContents()
    def uploadStaff(self,mainWindow):
        query  = QSqlQuery()
        query.exec("select id,surname,name,post,phonenumber from staff")
        while query.next():
            rows = self.tableWidget_3.rowCount()
            self.tableWidget_3.setRowCount(rows + 1)
            self.tableWidget_3.setItem(rows, 0, QtWidgets.QTableWidgetItem(str(query.value(0))))
            self.tableWidget_3.setItem(rows, 1, QtWidgets.QTableWidgetItem(query.value(1)))
            self.tableWidget_3.setItem(rows, 2, QtWidgets.QTableWidgetItem(query.value(2)))
            self.tableWidget_3.setItem(rows, 3, QtWidgets.QTableWidgetItem(query.value(3)))
            self.tableWidget_3.setItem(rows, 4, QtWidgets.QTableWidgetItem(query.value(4)))
        self.tableWidget_3.resizeColumnsToContents()
    def updateStaff(self,mainWindow):
        query  = QSqlQuery()
        query.exec("select id,surname,name,post,phonenumber from staff")
        self.tableWidget_3.setRowCount(0)
        while query.next():
            rows = self.tableWidget_3.rowCount()
            self.tableWidget_3.setRowCount(rows + 1)
            self.tableWidget_3.setItem(rows, 0, QtWidgets.QTableWidgetItem(str(query.value(0))))
            self.tableWidget_3.setItem(rows, 1, QtWidgets.QTableWidgetItem(query.value(1)))
            self.tableWidget_3.setItem(rows, 2, QtWidgets.QTableWidgetItem(query.value(2)))
            self.tableWidget_3.setItem(rows, 3, QtWidgets.QTableWidgetItem(query.value(3)))
            self.tableWidget_3.setItem(rows, 4, QtWidgets.QTableWidgetItem(query.value(4)))
        self.tableWidget_3.resizeColumnsToContents()
    def uploadTravelPack(self,mainWindow):
        query  = QSqlQuery()
        query.exec("select id,name,description,status,start_date,end_date,id_pr from travel_packages")
       
        while query.next():
            rows = self.tableWidget_4.rowCount()
            self.tableWidget_4.setRowCount(rows + 1)
            self.tableWidget_4.setItem(rows, 0, QtWidgets.QTableWidgetItem(str(query.value(0))))
            self.tableWidget_4.setItem(rows, 1, QtWidgets.QTableWidgetItem(query.value(1)))
            self.tableWidget_4.setItem(rows, 2, QtWidgets.QTableWidgetItem(query.value(2)))
            self.tableWidget_4.setItem(rows, 3, QtWidgets.QTableWidgetItem(query.value(3)))
            self.tableWidget_4.setItem(rows, 4, QtWidgets.QTableWidgetItem(query.value(4)))
            self.tableWidget_4.setItem(rows, 5, QtWidgets.QTableWidgetItem(query.value(5)))
            self.tableWidget_4.setItem(rows, 6, QtWidgets.QTableWidgetItem(str(query.value(6))))
        self.tableWidget_4.resizeColumnsToContents()
    def updateTravelPack(self,mainWindow):
        query  = QSqlQuery()
        query.exec("select id,name,description,status,start_date,end_date,id_pr from travel_packages")
        self.tableWidget_4.setRowCount(0)
        while query.next():
            rows = self.tableWidget_4.rowCount()
            self.tableWidget_4.setRowCount(rows + 1)
            self.tableWidget_4.setItem(rows, 0, QtWidgets.QTableWidgetItem(str(query.value(0))))
            self.tableWidget_4.setItem(rows, 1, QtWidgets.QTableWidgetItem(query.value(1)))
            self.tableWidget_4.setItem(rows, 2, QtWidgets.QTableWidgetItem(query.value(2)))
            self.tableWidget_4.setItem(rows, 3, QtWidgets.QTableWidgetItem(query.value(3)))
            self.tableWidget_4.setItem(rows, 4, QtWidgets.QTableWidgetItem(query.value(4)))
            self.tableWidget_4.setItem(rows, 5, QtWidgets.QTableWidgetItem(query.value(5)))
            self.tableWidget_4.setItem(rows, 6, QtWidgets.QTableWidgetItem(str(query.value(6))))
        self.tableWidget_4.resizeColumnsToContents()
    def insertTask(self,id_tr,description,status,date_start,date_end,id_st):
        #print(f"{id_tr},{description},{status},{date_start},{date_end},{id_st}")
        if id_tr == 0 or  description == '' or status == '' or date_start == '' or date_end == '' :
            QtWidgets.QMessageBox.critical(None, 'Ошибка',
                            'Заполнены не все поля!!!')
        else:
            idSt,surname = id_st.split('.')
            query = QSqlQuery()
            query.prepare(F"INSERT INTO Tasks (id_trav,description, status, start_date,end_date,id_st) VALUES ({int(id_tr)},'{description}','{status}','{date_start}','{date_end}',{int(idSt)})")
            
            if not query.exec_():
                QtWidgets.QMessageBox.critical(None, 'Ошибка',
                            'При добавлении произошла ошибка!!!')
            else:
                QtWidgets.QMessageBox.information(None, 'Успех',
                            'Добавлено успешно!')
                self.lineEdit.clear()
                self.lineEdit_2.clear()
                self.lineEdit_3.clear()
                self.updateTask(MainWindow)
    def insertProvider(self,name,surname,phonenumber):
    #print(f"{id_tr},{description},{status},{date_start},{date_end},{id_st}")
        if surname == '' or  name == '' or phonenumber == '':
            QtWidgets.QMessageBox.critical(None, 'Ошибка',
                            'Заполнены не все поля!!!')
        else:
            query = QSqlQuery()
            query.prepare(F"INSERT INTO Provider (surname,name,phonenumber) VALUES ('{surname}','{name}','{phonenumber}')")
            
            if not query.exec_():
                QtWidgets.QMessageBox.critical(None, 'Ошибка',
                            'При добавлении произошла ошибка!!!')
            else:
                QtWidgets.QMessageBox.information(None, 'Успех',
                            'Добавлено успешно!')
                self.lineEdit_7.clear()
                self.lineEdit_8.clear()
                self.lineEdit_10.clear()
                self.updateProvider(MainWindow)   
    def insertStaff(self,surname,name,post,phonenumber):
    #print(f"{id_tr},{description},{status},{date_start},{date_end},{id_st}")
        if surname == '' or  name == '' or phonenumber == '' or post == '':
            QtWidgets.QMessageBox.critical(None, 'Ошибка',
                            'Заполнены не все поля!!!')
        else:
            query = QSqlQuery()
            query.prepare(F"INSERT INTO Staff (surname,name,post,phonenumber) VALUES ('{surname}','{name}','{post}','{phonenumber}')")
            
            if not query.exec_():
                QtWidgets.QMessageBox.critical(None, 'Ошибка',
                            'При добавлении произошла ошибка!!!')
            else:
                QtWidgets.QMessageBox.information(None, 'Успех',
                            'Добавлено успешно!')
                self.lineEdit_11.clear()
                self.lineEdit_12.clear()
                self.lineEdit_13.clear()
                self.lineEdit_14.clear()
                self.updateStaff(MainWindow)  
    def insertTravelPack(self,name,description,status,start_date,end_date,id_pr):
    #print(f"{id_tr},{description},{status},{date_start},{date_end},{id_st}")
        if description == '' or  name == '' or status == '' or start_date == '' or end_date == '' :
            QtWidgets.QMessageBox.critical(None, 'Ошибка',
                            'Заполнены не все поля!!!')
        else:
            idpr, surname = id_pr.split('.')
            query = QSqlQuery()
            query.prepare(F"INSERT INTO travel_packages (name,description,status,start_date,end_date,id_pr) VALUES ('{name}','{description}','{status}','{start_date}','{end_date}',{int(idpr)})")
            
            if not query.exec_():
                QtWidgets.QMessageBox.critical(None, 'Ошибка',
                            'При добавлении произошла ошибка!!!')
            else:
                QtWidgets.QMessageBox.information(None, 'Успех',
                            'Добавлено успешно!')
                self.lineEdit_4.clear()
                self.lineEdit_5.clear()
                self.lineEdit_6.clear()
                self.updateTravelPack(MainWindow) 
    def deleteTask(self):
        #item = self.tableWidget.item(self.tableWidget.currentRow(),0).text()
        if self.tableWidget.selectedIndexes():
            if self.tableWidget.item(self.tableWidget.currentRow(),0).text():
                item = self.tableWidget.item(self.tableWidget.currentRow(),0).text()
                query = QSqlQuery()
                query.prepare(F"Delete from tasks where id = {int(item)}")
                if not query.exec_():
                    QtWidgets.QMessageBox.critical(None, 'Ошибка',
                                'При удалении произошла ошибка!!!')
                else:
                    QtWidgets.QMessageBox.information(None, 'Успех',
                                'Удалено успешно!')
                    self.updateTask(MainWindow)
        else:
            QtWidgets.QMessageBox.information(None, 'Удаление',
                            'Выберите строку!')
    def deleteProvider(self):
        #item = self.tableWidget.item(self.tableWidget.currentRow(),0).text()
        if self.tableWidget_2.selectedIndexes():
            if self.tableWidget_2.item(self.tableWidget_2.currentRow(),0).text():
                item = self.tableWidget_2.item(self.tableWidget_2.currentRow(),0).text()
                query = QSqlQuery()
                query.prepare(F"Delete from Provider where id = {int(item)}")
                if not query.exec_():
                    QtWidgets.QMessageBox.critical(None, 'Ошибка',
                                'При удалении произошла ошибка!!!')
                else:
                    QtWidgets.QMessageBox.information(None, 'Успех',
                                'Удалено успешно!')
                    self.updateProvider(MainWindow)
        else:
            QtWidgets.QMessageBox.information(None, 'Удаление',
                            'Выберите строку!')
    def deleteStaff(self):
        #item = self.tableWidget.item(self.tableWidget.currentRow(),0).text()
        if self.tableWidget_3.selectedIndexes():
            if self.tableWidget_3.item(self.tableWidget_3.currentRow(),0).text():
                item = self.tableWidget_3.item(self.tableWidget_3.currentRow(),0).text()
                query = QSqlQuery()
                query.prepare(F"Delete from staff where id = {int(item)}")
                if not query.exec_():
                    QtWidgets.QMessageBox.critical(None, 'Ошибка',
                                'При удалении произошла ошибка!!!')
                else:
                    QtWidgets.QMessageBox.information(None, 'Успех',
                                'Удалено успешно!')
                    self.updateStaff(MainWindow)
        else:
            QtWidgets.QMessageBox.information(None, 'Удаление',
                            'Выберите строку!')
    def deleteTravelPack(self):
        #item = self.tableWidget.item(self.tableWidget.currentRow(),0).text()
        if self.tableWidget_4.selectedIndexes():
            if self.tableWidget_4.item(self.tableWidget_4.currentRow(),0).text():
                item = self.tableWidget_4.item(self.tableWidget_4.currentRow(),0).text()
                query = QSqlQuery()
                query.prepare(F"Delete from travel_packages where id = {int(item)}")
                if not query.exec_():
                    QtWidgets.QMessageBox.critical(None, 'Ошибка',
                                'При удалении произошла ошибка!!!')
                else:
                    QtWidgets.QMessageBox.information(None, 'Успех',
                                'Удалено успешно!')
                    self.updateTravelPack(MainWindow)
        else:
            QtWidgets.QMessageBox.information(None, 'Удаление',
                            'Выберите строку!')
    def editTask(self):
        if self.tableWidget.selectedIndexes():
            if self.tableWidget.item(self.tableWidget.currentRow(),0).text():
                id_trav = self.tableWidget.item(self.tableWidget.currentRow(),1).text()
                description = self.tableWidget.item(self.tableWidget.currentRow(),2).text()
                status = self.tableWidget.item(self.tableWidget.currentRow(),3).text()
                start_date = self.tableWidget.item(self.tableWidget.currentRow(),4).text()
                end_date = self.tableWidget.item(self.tableWidget.currentRow(),5).text()
                id_st = self.tableWidget.item(self.tableWidget.currentRow(),6).text()
                print(id_trav,description,status, start_date,end_date)
                self.lineEdit.setText(id_trav)
                self.lineEdit_2.setText(description)
                self.lineEdit_3.setText(status)
                day, month, year = start_date.split('.')
                year = int(year)
                month = int(month)
                day = int(day)
                print(year,month,day)
                dateFormat = QtCore.QDate(year,month,day)
                self.dateEdit.setDate(dateFormat)
                dayTwo, monthTwo, yearTwo = end_date.split('.')
                yearTwo = int(yearTwo)
                monthTwo = int(monthTwo)
                dayTwo = int(dayTwo)
                print(year,month,day)
                dateFormatTwo = QtCore.QDate(yearTwo,monthTwo,dayTwo)
                self.dateEdit_2.setDate(dateFormatTwo)
                self.tableWidget.setDisabled(True)
                self.pushButton_10.setVisible(True)
                query  = QSqlQuery()
                query.exec(F"select id,surname from staff where id = {int(id_st)}")
                #result = query.fetchall()   
                while query.next():
                    strForFind = (str(query.value(0))+ '.' + str(query.value(1)))
                index = self.comboBox.findText(strForFind)
                self.comboBox.setCurrentIndex(index)
        else:
            QtWidgets.QMessageBox.information(None, 'Редактирование',
                'Выберите строку для редактирования!')
    def saveTask(self,id_tr,description,status,date_start,date_end,id_st):
    #id_trav,description, status, start_date,end_date,id_st
        idSt, surname = id_st.split('.')
        idForEditTask = self.tableWidget.item(self.tableWidget.currentRow(),0).text()
        query = QSqlQuery()
        query.prepare(F"update Tasks set id_trav = {id_tr} ,description = '{description}', status = '{status}', start_date = '{date_start}',end_date = '{date_end}',id_st = {int(idSt)}  where id = {int(idForEditTask)}")
        if not query.exec_():
            QtWidgets.QMessageBox.critical(None, 'Ошибка',
                        'При удалении произошла ошибка!!!')
        else:
            QtWidgets.QMessageBox.information(None, 'Успех',
                        'Сохранено успешно!')
            self.tableWidget.setEnabled(True)
            self.updateTask(MainWindow)
            self.lineEdit.clear()
            self.lineEdit_2.clear()
            self.lineEdit_3.clear()
            self.pushButton_10.setVisible(False)
            
    def editProvider(self):
        if self.tableWidget_2.selectedIndexes():
            if self.tableWidget_2.item(self.tableWidget_2.currentRow(),0).text():
                surname = self.tableWidget_2.item(self.tableWidget_2.currentRow(),1).text()
                name = self.tableWidget_2.item(self.tableWidget_2.currentRow(),2).text()
                phonenumber = self.tableWidget_2.item(self.tableWidget_2.currentRow(),3).text()
                print(surname,name,phonenumber)
                self.lineEdit_7.setText(name)
                self.lineEdit_8.setText(surname)
                self.lineEdit_10.setText(phonenumber)
                self.tableWidget_2.setDisabled(True)
                self.pushButton_5.setVisible(True)
        else:
            QtWidgets.QMessageBox.information(None, 'Редактирование',
                'Выберите строку для редактирования!')

    def saveProvider(self,name,surname,phonenumber):
    #id_trav,description, status, start_date,end_date,id_st
        idForEditProvider = self.tableWidget_2.item(self.tableWidget_2.currentRow(),0).text()
        query = QSqlQuery()
        query.prepare(F"update Provider set surname = '{surname}' ,name = '{name}', phonenumber = '{phonenumber}' where id = {int(idForEditProvider)}")
        if not query.exec_():   
            QtWidgets.QMessageBox.critical(None, 'Ошибка',
                        'При удалении произошла ошибка!!!')
        else:
            QtWidgets.QMessageBox.information(None, 'Успех',
                        'Сохранено успешно!')
            self.tableWidget_2.setEnabled(True)
            self.updateProvider(MainWindow)
            self.lineEdit_7.clear()
            self.lineEdit_8.clear()
            self.lineEdit_10.clear()
    def editStaff(self):
        if self.tableWidget_3.selectedIndexes():
            if self.tableWidget_3.item(self.tableWidget_3.currentRow(),0).text():
                surname = self.tableWidget_3.item(self.tableWidget_3.currentRow(),1).text()
                name = self.tableWidget_3.item(self.tableWidget_3.currentRow(),2).text()
                post = self.tableWidget_3.item(self.tableWidget_3.currentRow(),3).text()
                phonenumber = self.tableWidget_3.item(self.tableWidget_3.currentRow(),4).text()
                print(surname,name,phonenumber)
                self.lineEdit_11.setText(surname)
                self.lineEdit_12.setText(name)
                self.lineEdit_13.setText(post)
                self.lineEdit_14.setText(phonenumber)
                self.tableWidget_2.setDisabled(True)
                self.pushButton_3.setVisible(True)
        else:
            QtWidgets.QMessageBox.information(None, 'Редактирование',
                'Выберите строку для редактирования!')
    def saveStaff(self,surname,name,post,phonenumber):
    #id_trav,description, status, start_date,end_date,id_st
        idForEditStaff = self.tableWidget_3.item(self.tableWidget_3.currentRow(),0).text()
        query = QSqlQuery()
        query.prepare(F"update staff set surname = '{surname}' ,name = '{name}', post = '{post}',phonenumber = '{phonenumber}' where id = {int(idForEditStaff)}")
        if not query.exec_():   
            QtWidgets.QMessageBox.critical(None, 'Ошибка',
                        'При удалении произошла ошибка!!!')
        else:
            QtWidgets.QMessageBox.information(None, 'Успех',
                        'Сохранено успешно!')
            self.tableWidget_3.setEnabled(True)
            self.updateStaff(MainWindow)
            self.lineEdit_11.clear()
            self.lineEdit_12.clear()
            self.lineEdit_13.clear()
            self.lineEdit_14.clear()
    def editTravelPack(self):
        #name,description,status,start_ddate,end_date,id_pr
        if self.tableWidget_4.selectedIndexes():
            if self.tableWidget_4.item(self.tableWidget_4.currentRow(),0).text():
                name = self.tableWidget_4.item(self.tableWidget_4.currentRow(),1).text()
                description = self.tableWidget_4.item(self.tableWidget_4.currentRow(),2).text()
                status = self.tableWidget_4.item(self.tableWidget_4.currentRow(),3).text()
                start_date = self.tableWidget_4.item(self.tableWidget_4.currentRow(),4).text()
                end_date = self.tableWidget_4.item(self.tableWidget_4.currentRow(),5).text()
                id_pr = self.tableWidget_4.item(self.tableWidget_4.currentRow(),6).text()
                print(name,description,status, start_date,end_date)
                self.lineEdit_4.setText(description)
                self.lineEdit_5.setText(name)
                self.lineEdit_6.setText(status)
                day, month, year = start_date.split('.')
                year = int(year)
                month = int(month)
                day = int(day)
                print(year,month,day)
                dateFormat = QtCore.QDate(year,month,day)
                self.dateEdit_3.setDate(dateFormat)
                dayTwo, monthTwo, yearTwo = end_date.split('.')
                yearTwo = int(yearTwo)
                monthTwo = int(monthTwo)
                dayTwo = int(dayTwo)
                print(year,month,day)
                dateFormatTwo = QtCore.QDate(yearTwo,monthTwo,dayTwo)
                self.dateEdit_4.setDate(dateFormatTwo)
                query  = QSqlQuery()
                query.exec(F"select id,surname from Provider where id = {int(id_pr)}")
                #result = query.fetchall()   
                while query.next():
                    strForFind = (str(query.value(0))+ '.' + str(query.value(1)))
                index = self.comboBox_2.findText(strForFind)
                self.comboBox_2.setCurrentIndex(index)
                self.tableWidget_4.setDisabled(True)
                self.pushButton_5.setVisible(True)
        else:
            QtWidgets.QMessageBox.information(None, 'Редактирование',
                'Выберите строку для редактирования!')
    def saveTravelPack(self,name,description,status,date_start,date_end,id_pr):
    #id_trav,description, status, start_date,end_date,id_st
        idpr, surname = id_pr.split('.')
        idForEditTravelPack = self.tableWidget_4.item(self.tableWidget_4.currentRow(),0).text()
        query = QSqlQuery()
        query.prepare(F"update travel_packages set name = '{name}' ,description = '{description}', status = '{status}', start_date = '{date_start}',end_date = '{date_end}', id_pr = {int(idpr)} where id = {int(idForEditTravelPack)}")
        if not query.exec_():
            QtWidgets.QMessageBox.critical(None, 'Ошибка',
                        'При удалении произошла ошибка!!!')
        else:
            QtWidgets.QMessageBox.information(None, 'Успех',
                        'Сохранено успешно!')
            self.tableWidget_4.setEnabled(True)
            self.updateTravelPack(MainWindow)
            self.lineEdit_4.clear()
            self.lineEdit_5.clear()
            self.lineEdit_6.clear()
class Ui_Dialog(object):
    checkPass = 0
    def setupUi(self, Dialog):
        Dialog.setObjectName("Dialog")
        Dialog.resize(223, 189)
        self.lineEdit_2 = QtWidgets.QLineEdit(Dialog)
        self.lineEdit_2.setGeometry(QtCore.QRect(20, 100, 180, 31))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.lineEdit_2.setFont(font)
        self.lineEdit_2.setEchoMode(QtWidgets.QLineEdit.Password)
        self.lineEdit_2.setObjectName("lineEdit_2")
        self.pushButton = QtWidgets.QPushButton(Dialog)
        self.pushButton.setGeometry(QtCore.QRect(60, 140, 101, 31))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.pushButton.setFont(font)
        self.pushButton.setObjectName("pushButton")
        #self.pushButton.clicked.connect(message)
        self.lineEdit = QtWidgets.QLineEdit(Dialog)
        self.lineEdit.setGeometry(QtCore.QRect(20, 40, 180, 31))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.lineEdit.setFont(font)
        self.lineEdit.setObjectName("lineEdit")
        self.label_2 = QtWidgets.QLabel(Dialog)
        self.label_2.setGeometry(QtCore.QRect(70, 70, 90, 30))
        font = QtGui.QFont()
        font.setPointSize(16)
        self.label_2.setFont(font)
        self.label_2.setObjectName("label_2")
        self.label = QtWidgets.QLabel(Dialog)
        self.label.setGeometry(QtCore.QRect(80, 10, 71, 21))
        font = QtGui.QFont()
        font.setPointSize(16)
        self.label.setFont(font)
        self.label.setObjectName("label")
        self.retranslateUi(Dialog)
        QtCore.QMetaObject.connectSlotsByName(Dialog)

    def retranslateUi(self, Dialog):
        _translate = QtCore.QCoreApplication.translate
        Dialog.setWindowTitle(_translate("Dialog", "Dialog"))
        self.pushButton.setText(_translate("Dialog", "Вход"))
        self.label_2.setText(_translate("Dialog", "Password"))
        self.label.setText(_translate("Dialog", "Login"))
        self.pushButton.clicked.connect(lambda: self.checkLoginAndPass(self.lineEdit.text(),self.lineEdit_2.text()))
    def checkLoginAndPass(self,login,password):
        if login == 'admin' and password == 'admin':
            self.checkPass = 1
            Dialog.close()
        else:
           QtWidgets.QMessageBox.information(None, 'Ошибка',
            "Неверный пароль")


if __name__ == "__main__":
    import sys
    connect()
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    Dialog = QtWidgets.QDialog()
    ui = Ui_Dialog()
    ui.setupUi(Dialog)
    Dialog.exec_()
    print(ui.checkPass)
    if ui.checkPass == 1 : 
        MainWindow.show()
        sys.exit(app.exec_())
    else:
        QtCore.QCoreApplication.quit()
